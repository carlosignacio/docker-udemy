----------- SEÇÃO 9 - AULA 59 -----------

* Boas práticas - Variáveis de ambiente

** Editando sender.py

import psycopg2
import redis
import json
import os
from bottle import Bottle, request


class Sender(Bottle):
	def __init__(self):
		super().__init__()
		self.route('/', method='POST', callback=self.send)
		
		redis_host = os.getenv('REDIS_HOST', 'queue')
		self.fila = redis.StrictRedis(host=redis_host, port=6379, db=0)
		
		db_host = os.getenv('DB_HOST', 'db')
		db_user = os.getenv('DB_USER', 'postgres')
		db_name = os.getenv('DB_NAME', 'sender')
		dsn = f'dbname={db_name} user={db_user} host={db_host}'
		self.conn = psycopg2.connect(dsn)

	def register_message(self, assunto, mensagem):
		SQL = 'INSERT INTO emails (assunto, mensagem) VALUES (%s, %s)'
		cur = self.conn.cursor()
		cur.execute(SQL, (assunto, mensagem))
		self.conn.commit()
		cur.close()

		msg = {'assunto': assunto, 'mensagem': mensagem}
		self.fila.rpush('sender', json.dumps(msg))

		print('Mensagem registrada !')

	def send(self):
		assunto = request.forms.get('assunto')
		mensagem = request.forms.get('mensagem')
		
		self.register_message(assunto, mensagem)
		return 'Mensagem enfileirada ! Assunto: {} Mensagem: {}'.format(
			assunto, mensagem
		)
						

if __name__ == '__main__':
	sender = Sender()
	sender.run(host='0.0.0.0', port=8080, debug=True)
	

	

** Editando worker.py

import redis
import json
import os
from time import sleep
from random import randint

if __name__== '__main__':
    redis_host = os.getenv('REDIS_HOST', 'queue')
    r = redis.Redis(host=redis_host, port=6379, db=0)
    print('Aguardando mensagens...')
    while True:
        mensagem = json.loads(r.blpop('sender')[1])
        # Simulando envio de e-mail...
        print('Encaminhando a mensagem:', mensagem['assunto'])
        sleep(randint(15, 45))
        print('Mensagem', mensagem['assunto'], 'Mensagem encaminhada com sucesso')

** Editando docker-compose.yml

version: '2'
volumes:
  dados:
networks:
  banco:
  web:
  fila:
services:
  db:
    image: postgres:9.6
    volumes:
      #Volmues dos dados
      - dados:/var/lib/postgresql/data
      #Scripts
      - ./scripts:/scripts
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - banco
  frontend:
    image: nginx:1.13
    volumes: 
      # Site
      - ./web:/usr/share/nginx/html/
      # Configuração do proxy reverso
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 80:80
    networks:
      - web
    depends_on:
      - app
  app:
    image: python:3.6
    volumes:
      # Aplicação
      - ./app:/app
    working_dir: /app
    command: bash ./app.sh
    networks:
      - banco
      - web
      - fila
    depends_on:
      - db
      - queue
    environment:
      - DB_NAME=email_sender
  queue:
    image: redis:3.2
    networks: 
      - fila
  worker:
    build: worker
    volumes:
      # Worker
      - ./worker:/worker
    working_dir: /worker
    command: worker.py
    networks: 
      - fila
    depends_on:
      - queue	
	
	
$ docker-compose ps
$ docker-compose up -d 
$ docker-compose scale worker=3
$ docker-compose exec db psql -U postgres -d email_sender -c 'select * from emails'

 id |            data            |     assunto     |           mensagem
----+----------------------------+-----------------+-------------------------------
  2 | 2018-05-23 10:05:44.903285 | SerÃ¡ que vai   | vai ou nÃ£o vai
  3 | 2018-05-24 09:47:08.517054 | Teste de Worker | Texto do teste de worker
  4 | 2018-05-28 09:49:57.788099 | Varios workes   | docker-compose up -d\r       +
    |                            |                 | docker-compose scale worker=3
  5 | 2018-05-29 09:25:28.051037 | mais um teste   | ultima aula - mais um teste
(4 rows)
