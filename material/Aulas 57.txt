----------- SEÇÃO 9 - AULA 57 -----------

* Workers

** Editando docker-compose-yml

version: '2'
volumes:
  dados:
networks:
  banco:
  web:
  fila:
services:
  db:
    image: postgres:9.6
    volumes:
      #Volmues dos dados
      - dados:/var/lib/postgresql/data
      #Scripts
      - ./scripts:/scripts
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - banco
  frontend:
    image: nginx:1.13
    volumes: 
      # Site
      - ./web:/usr/share/nginx/html/
      # Configuração do proxy reverso
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 80:80
    networks:
      - web
    depends_on:
      - app
  app:
    image: python:3.6
    volumes:
      # Aplicação
      - ./app:/app
    working_dir: /app
    command: bash ./app.sh
    networks:
      - banco
      - web
      - fila
    depends_on:
      - db
      - queue
  queue:
    image: redis:3.2
    networks: 
      - fila
  worker:
    image: python:3.6
    volumes:
      # Worker
      - ./worker:/worker
    working_dir: /worker
    command: bash ./app.sh
    networks: 
      - fila
    depends_on:
      - queue


** Editando app.sh

#!/bin/sh

pip install bottle==0.12.13 psycopg2==2.7.1 redis==2.10.5
python -u sender.py


** Editando sender.py

import psycopg2
import redis
import json
from bottle import Bottle, request


class Sender(Bottle):
	def __init__(self):
		super().__init__()
		self.route('/', method='POST', callback=self.send)
		self.fila = redis.StrictRedis(host='queue', port=6379, db=0)
		DSN = 'dbname=email_sender user=postgres host=db'
		self.conn = psycopg2.connect(DSN)

	def register_message(self, assunto, mensagem):
		SQL = 'INSERT INTO emails (assunto, mensagem) VALUES (%s, %s)'
		cur = self.conn.cursor()
		cur.execute(SQL, (assunto, mensagem))
		self.conn.commit()
		cur.close()

		msg = {'assunto': assunto, 'mensagem': mensagem}
		self.fila.rpush('sender', json.dumps(msg))

		print('Mensagem registrada !')

	def send(self):
		assunto = request.forms.get('assunto')
		mensagem = request.forms.get('mensagem')
		
		self.register_message(assunto, mensagem)
		return 'Mensagem enfileirada ! Assunto: {} Mensagem: {}'.format(
			assunto, mensagem
		)
						

if __name__ == '__main__':
	sender = Sender()
	sender.run(host='0.0.0.0', port=8080, debug=True)
	
	
	
	
$ mkdir worker
$ cd worker
$ touch app.sh
$ chmod 777 app.sh
$ touch worker.py
$ chmod 777 worker.py

** Editando app.sh do Worker

#!/bin/sh

pip install redis==2.10.5
python -u worker.py

** Editando worker.py

import redis
import json
from time import sleep
from random import randint

if __name__== '__main__':
    r = redis.Redis(host='queue', port=6379, db=0)
    while True:
        mensagem = json.loads(r.blpop('sender')[1])
        # Simulando envio de e-mail...
        print('Encaminhando a mensagem:', mensagem['assunto'])
        sleep(randint(15, 45))
        print('Mensagem', mensagem['assunto'], 'Mensagem encaminhada com sucesso')

$ docker-compose ps
$ docker-compose down
$ docker-compose up -d


docker-compose exec db psql -U postgres -d email_sender -c 'select * from emails'

